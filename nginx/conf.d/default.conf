# Dynamic upstream configuration for blue-green deployment
# The actual upstream service (app_blue or app_green) is set dynamically in the location block

server {
    listen 80;
    server_name acme.com api-dev.acme.com;

    # Add resolver for Docker DNS with better timeout handling
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name acme.com api-dev.acme.com;

    # Add resolver for Docker DNS with better timeout handling
    resolver 127.0.0.11 valid=30s ipv6=off;

    ssl_certificate /etc/nginx/ssl/acme.com.crt;
    ssl_certificate_key /etc/nginx/ssl/acme.com.key;

    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    location / {
        # Use a variable for the upstream to force runtime DNS resolution
        # This prevents nginx from failing at startup if the service isn't ready
        set $upstream_host app_blue:3000;  # Currently routing to blue deployment
        
        # Add timeout and retry settings for better resilience
        proxy_pass http://$upstream_host;
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Forward the Authorization header from the client
        proxy_set_header Authorization $http_authorization;
        
        # Forward additional custom headers
        proxy_set_header X-Client-Version $http_x_client_version;
        proxy_set_header X-Client-Platform $http_x_client_platform;
        proxy_set_header X-Device-Model $http_x_device_model;
        proxy_set_header Accept-Language $http_accept_language;
    }
}