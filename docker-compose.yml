# Docker Compose configuration for Acme Server

services:
  # --- SHARED DATABASE SERVICE ---
  # Used by all environments (dev, test, prod)

  db:
    image: mysql:5.7
    platform: linux/amd64
    container_name: acme_server-db
    environment:
      MYSQL_DATABASE: ${DB_NAME:-acme_dev}
      MYSQL_USER: ${DB_USER:-dev_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-dev_password}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-dev_password}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app_dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acme_server-app_dev
    platform: linux/amd64
    profiles:
      - dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${DB_USER:-dev_user}
      DB_PASSWORD: ${DB_PASSWORD:-dev_password}
      DB_NAME: ${DB_NAME:-acme_dev}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET:-dev_secret}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET:-dev_mgmt_secret}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # --- TESTING SERVICES ---
  # Profile: test

  test_db:
    image: mysql:5.7
    platform: linux/amd64
    container_name: acme_server-test_db
    environment:
      MYSQL_DATABASE: ${DB_NAME:-acme_test}
      MYSQL_USER: ${DB_USER:-test_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-test_password}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-test_password}
    volumes:
      - db-data-test:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  app_test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acme_server-app_test
    platform: linux/amd64
    profiles:
      - test
    environment:
      NODE_ENV: test
      DB_HOST: test_db
      DB_PORT: 3306
      DB_USER: ${DB_USER:-test_user}
      DB_PASSWORD: ${DB_PASSWORD:-test_password}
      DB_NAME: ${DB_NAME:-acme_test}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET:-test_secret}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET:-test_mgmt_secret}
    command: npm test
    depends_on:
      test_db:
        condition: service_healthy
    networks:
      - app-network

  # --- PRODUCTION-LIKE BLUE/GREEN SERVICES ---
  # Profile: prod

  app_blue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acme_server-app_blue
    platform: linux/amd64
    profiles:
      - prod
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      ENVIRONMENT: ${ENVIRONMENT:-prod}
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      
      # Auth0 Configuration
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL:-}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-}
      
      # Client Version Requirements
      MIN_IOS_VERSION: ${MIN_IOS_VERSION:-}
      MIN_ANDROID_VERSION: ${MIN_ANDROID_VERSION:-}
      MIN_WEB_VERSION: ${MIN_WEB_VERSION:-}
      
      # Feature Flags
      ENABLE_DEBUG_LOGGING: ${ENABLE_DEBUG_LOGGING:-false}
      ENABLE_FEATURE_FLAGS: ${ENABLE_FEATURE_FLAGS:-false}
      SKIP_EMAIL_VERIFICATION: ${SKIP_EMAIL_VERIFICATION:-false}
      
      # API Configuration
      PORT: ${PORT:-3000}
      API_BASE_URL: ${API_BASE_URL:-}
      
      # AWS Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-}
      
      # Stripe Configuration
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      
      # OneSignal Configuration
      ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID:-}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY:-}
      
      # Security Settings (PROD)
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      ENABLE_CORS_STRICT_MODE: ${ENABLE_CORS_STRICT_MODE:-true}
      ENABLE_HELMET_SECURITY: ${ENABLE_HELMET_SECURITY:-true}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  app_green:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acme_server-app_green
    platform: linux/amd64
    profiles:
      - prod
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      ENVIRONMENT: ${ENVIRONMENT:-prod}
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      
      # Auth0 Configuration
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL:-}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-}
      
      # Client Version Requirements
      MIN_IOS_VERSION: ${MIN_IOS_VERSION:-}
      MIN_ANDROID_VERSION: ${MIN_ANDROID_VERSION:-}
      MIN_WEB_VERSION: ${MIN_WEB_VERSION:-}
      
      # Feature Flags
      ENABLE_DEBUG_LOGGING: ${ENABLE_DEBUG_LOGGING:-false}
      ENABLE_FEATURE_FLAGS: ${ENABLE_FEATURE_FLAGS:-false}
      SKIP_EMAIL_VERIFICATION: ${SKIP_EMAIL_VERIFICATION:-false}
      
      # API Configuration
      PORT: ${PORT:-3000}
      API_BASE_URL: ${API_BASE_URL:-}
      
      # AWS Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-}
      
      # Stripe Configuration
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      
      # OneSignal Configuration
      ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID:-}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY:-}
      
      # Security Settings (PROD)
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      ENABLE_CORS_STRICT_MODE: ${ENABLE_CORS_STRICT_MODE:-true}
      ENABLE_HELMET_SECURITY: ${ENABLE_HELMET_SECURITY:-true}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # --- NGINX LOAD BALANCER FOR BLUE/GREEN DEPLOYMENT ---
  nginx:
    image: nginx:1.24-alpine
    container_name: acme_server-nginx
    platform: linux/amd64
    profiles:
      - prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:rw
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app_blue
      - app_green
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  db-data:
  db-data-test:

networks:
  app-network:
